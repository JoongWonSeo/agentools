from typing import Any, Optional
from abc import ABC
from dataclasses import dataclass

from ..api import (
    ChatCompletion,
    ChatCompletionMessage,
    ToolCall,
    ChatCompletionChunk,
)
from ..tools import Tools


# ================ Event Base Class =================#
class Event(ABC):
    """Event base class for Assistant events that occur during a prompt response."""

    pass


# ================ Full Response Events =================#
@dataclass
class ResponseStartEvent(Event):
    """Assistant was prompted with the following args"""

    prompt: str
    tools: Optional[Tools]
    model: str
    max_function_calls: int
    openai_kwargs: dict


@dataclass
class CompletionStartEvent(Event):
    """Start of a new message completion"""

    call_index: int = 0


@dataclass
class CompletionEvent(Event):
    """Final response from the API call to the model"""

    completion: ChatCompletion
    call_index: int = 0  # i-th response in this prompt


@dataclass
class FullMessageEvent(Event):
    """One message generated by the model, i.e. choice[i]"""

    message: ChatCompletionMessage
    choice_index: int = 0  # index of this message in the choices list


@dataclass
class TextMessageEvent(Event):
    """Pure text response part of the message"""

    content: str


@dataclass
class ToolCallsEvent(Event):
    """(One or more) tool calls generated by the model"""

    tool_calls: list[ToolCall]


@dataclass
class ToolResultEvent(Event):
    """Result of a tool call"""

    result: str
    tool_call: ToolCall
    index: int = 0  # index of this tool call in the tool_calls list


@dataclass
class ResponseEndEvent(Event):
    """Prompt response is complete with the following final content"""

    content: str


# ================ Partial Response (Streaming) Events =================#
@dataclass
class PartialCompletionEvent(Event):
    """Partial response during streaming, with `chunk` being the direct delta and `partial` being the accumulated response so far"""

    chunk: ChatCompletionChunk
    partial: ChatCompletion
    call_index: int = 0


@dataclass
class PartialMessageEvent(Event):
    """One message generated by the model, i.e. choice[i]"""

    message: ChatCompletionMessage
    choice_index: int = 0  # index of this message in the choices list


@dataclass
class PartialTextMessageEvent(Event):
    """Pure text response part of the message"""

    content: str


@dataclass
class PartialToolCallsEvent(Event):
    """Partial tool call was updated"""

    tool_calls: list[ToolCall]


@dataclass
class PartialFunctionToolCallEvent(Event):
    """One tool call, with autocompleted arguments"""

    function_name: str
    partial: str
    autocompleted: str
    arguments: dict
    index: int = 0


@dataclass
class PartialToolResultEvent(Event):
    """Result of a partial tool (preview) call"""

    result: Any
    tool_call: ToolCall
    index: int = 0  # index of this tool call in the tool_calls list


# ================ Error Events =================#
@dataclass
class MaxCallsExceededEvent(Event):
    """Maximum number of function calls exceeded"""

    num_calls: int


@dataclass
class MaxTokensExceededEvent(Event):
    """Maximum number of tokens exceeded"""

    num_tokens: int


@dataclass
class ModelTimeoutEvent(Event):
    """Model timed out"""


@dataclass
class ToolTimeoutEvent(Event):
    """Tool call timed out"""

    tool_call: ToolCall
